// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: api_key.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

const createApiKey = `-- name: CreateApiKey :one
insert into api_keys (
    user_id,
    credential,
    signature
) values (
    $1, $2, $3
) returning id, user_id, credential, signature, created_at, updated_at
`

type CreateApiKeyParams struct {
	UserID     int32  `json:"user_id"`
	Credential []byte `json:"credential"`
	Signature  []byte `json:"signature"`
}

func (q *Queries) CreateApiKey(ctx context.Context, arg CreateApiKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, createApiKey, arg.UserID, arg.Credential, arg.Signature)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Credential,
		&i.Signature,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteApiKey = `-- name: DeleteApiKey :execresult
delete from api_keys
where credential = $1 and user_id = $2
`

type DeleteApiKeyParams struct {
	Credential []byte `json:"credential"`
	UserID     int32  `json:"user_id"`
}

func (q *Queries) DeleteApiKey(ctx context.Context, arg DeleteApiKeyParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteApiKey, arg.Credential, arg.UserID)
}

const getApiKeyPayload = `-- name: GetApiKeyPayload :one
select user_id, signature from api_keys
where credential = $1
`

type GetApiKeyPayloadRow struct {
	UserID    int32  `json:"user_id"`
	Signature []byte `json:"signature"`
}

func (q *Queries) GetApiKeyPayload(ctx context.Context, credential []byte) (GetApiKeyPayloadRow, error) {
	row := q.db.QueryRow(ctx, getApiKeyPayload, credential)
	var i GetApiKeyPayloadRow
	err := row.Scan(&i.UserID, &i.Signature)
	return i, err
}

const listApiKeys = `-- name: ListApiKeys :many
select credential from api_keys
where user_id = $1
`

func (q *Queries) ListApiKeys(ctx context.Context, userID int32) ([][]byte, error) {
	rows, err := q.db.Query(ctx, listApiKeys, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := [][]byte{}
	for rows.Next() {
		var credential []byte
		if err := rows.Scan(&credential); err != nil {
			return nil, err
		}
		items = append(items, credential)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
