// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: document_registry.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createEmptyDocuments = `-- name: CreateEmptyDocuments :many
insert into documents_registry (
    user_id,
    file_name,
    object_key,
    lock_status,
    op_status
) select $1::int,
       unnest($2::varchar[]), 
       unnest($3::varchar[]),
       $4::bool,
       $5::operation_status
returning id, file_name, updated_at
`

type CreateEmptyDocumentsParams struct {
	UserID     int32           `json:"user_id"`
	FileNames  []string        `json:"file_names"`
	ObjectKeys []string        `json:"object_keys"`
	LockStatus bool            `json:"lock_status"`
	OpStatus   OperationStatus `json:"op_status"`
}

type CreateEmptyDocumentsRow struct {
	ID        int32              `json:"id"`
	FileName  string             `json:"file_name"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateEmptyDocuments(ctx context.Context, arg CreateEmptyDocumentsParams) ([]CreateEmptyDocumentsRow, error) {
	rows, err := q.db.Query(ctx, createEmptyDocuments,
		arg.UserID,
		arg.FileNames,
		arg.ObjectKeys,
		arg.LockStatus,
		arg.OpStatus,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CreateEmptyDocumentsRow{}
	for rows.Next() {
		var i CreateEmptyDocumentsRow
		if err := rows.Scan(&i.ID, &i.FileName, &i.UpdatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteFiles = `-- name: DeleteFiles :execresult
delete from documents_registry
where id = any($1::int[]) and lock_status = $2 and updated_at = $3
`

type DeleteFilesParams struct {
	Ids               []int32            `json:"ids"`
	CurrentLockStatus bool               `json:"current_lock_status"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) DeleteFiles(ctx context.Context, arg DeleteFilesParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteFiles, arg.Ids, arg.CurrentLockStatus, arg.UpdatedAt)
}

const listConflictingFiles = `-- name: ListConflictingFiles :many
select id, file_name, object_key from documents_registry
where ((lock_status = $1 AND op_status = $2) OR
    (lock_status = $3 AND op_status = $4) OR
    (lock_status = $5 AND op_status = $6) OR
    (lock_status = $7 AND op_status = $8) OR
    (lock_status = $9 AND op_status = $10))
    AND
    user_id = $11
`

type ListConflictingFilesParams struct {
	FirstLockCondition  bool            `json:"first_lock_condition"`
	FirstOpStatus       OperationStatus `json:"first_op_status"`
	SecondLockCondition bool            `json:"second_lock_condition"`
	SecondOpStatus      OperationStatus `json:"second_op_status"`
	ThirdLockCondition  bool            `json:"third_lock_condition"`
	ThirdOpStatus       OperationStatus `json:"third_op_status"`
	FourthLockCondition bool            `json:"fourth_lock_condition"`
	FourthOpStatus      OperationStatus `json:"fourth_op_status"`
	FifthLockCondition  bool            `json:"fifth_lock_condition"`
	FifthOpStatus       OperationStatus `json:"fifth_op_status"`
	UserID              int32           `json:"user_id"`
}

type ListConflictingFilesRow struct {
	ID        int32  `json:"id"`
	FileName  string `json:"file_name"`
	ObjectKey string `json:"object_key"`
}

func (q *Queries) ListConflictingFiles(ctx context.Context, arg ListConflictingFilesParams) ([]ListConflictingFilesRow, error) {
	rows, err := q.db.Query(ctx, listConflictingFiles,
		arg.FirstLockCondition,
		arg.FirstOpStatus,
		arg.SecondLockCondition,
		arg.SecondOpStatus,
		arg.ThirdLockCondition,
		arg.ThirdOpStatus,
		arg.FourthLockCondition,
		arg.FourthOpStatus,
		arg.FifthLockCondition,
		arg.FifthOpStatus,
		arg.UserID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListConflictingFilesRow{}
	for rows.Next() {
		var i ListConflictingFilesRow
		if err := rows.Scan(&i.ID, &i.FileName, &i.ObjectKey); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const syncDelete = `-- name: SyncDelete :execresult
delete from documents_registry
where id = any($1::int[])
`

func (q *Queries) SyncDelete(ctx context.Context, ids []int32) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, syncDelete, ids)
}

const syncUpdateDocument = `-- name: SyncUpdateDocument :execresult
update documents_registry
set
    lock_status = $1,
    op_status = $2,
    updated_at = now()
where id = any($3::int[])
`

type SyncUpdateDocumentParams struct {
	LockStatus bool            `json:"lock_status"`
	OpStatus   OperationStatus `json:"op_status"`
	Ids        []int32         `json:"ids"`
}

func (q *Queries) SyncUpdateDocument(ctx context.Context, arg SyncUpdateDocumentParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, syncUpdateDocument, arg.LockStatus, arg.OpStatus, arg.Ids)
}

const updateDocumentUploadStatus = `-- name: UpdateDocumentUploadStatus :execresult
update documents_registry
set
    lock_status = $1,
    op_status = $2,
    updated_at = now()
where id = any($3::int[]) and lock_status = $4 and updated_at = $5
`

type UpdateDocumentUploadStatusParams struct {
	LockStatus        bool               `json:"lock_status"`
	OpStatus          OperationStatus    `json:"op_status"`
	Ids               []int32            `json:"ids"`
	CurrentLockStatus bool               `json:"current_lock_status"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateDocumentUploadStatus(ctx context.Context, arg UpdateDocumentUploadStatusParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateDocumentUploadStatus,
		arg.LockStatus,
		arg.OpStatus,
		arg.Ids,
		arg.CurrentLockStatus,
		arg.UpdatedAt,
	)
}
