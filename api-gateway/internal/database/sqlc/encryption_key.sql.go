// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: encryption_key.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const countEncryptionKeys = `-- name: CountEncryptionKeys :one
select count(*) from encryption_keys
`

func (q *Queries) CountEncryptionKeys(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countEncryptionKeys)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createEncryptionKeys = `-- name: CreateEncryptionKeys :one
insert into encryption_keys (
    public_key,
    private_key,
    is_active
) values (
    $1, $2, $3
) returning id, public_key, private_key, is_active, created_at, updated_at
`

type CreateEncryptionKeysParams struct {
	PublicKey  string      `json:"public_key"`
	PrivateKey []byte      `json:"private_key"`
	IsActive   pgtype.Bool `json:"is_active"`
}

func (q *Queries) CreateEncryptionKeys(ctx context.Context, arg CreateEncryptionKeysParams) (EncryptionKey, error) {
	row := q.db.QueryRow(ctx, createEncryptionKeys, arg.PublicKey, arg.PrivateKey, arg.IsActive)
	var i EncryptionKey
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.PrivateKey,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEncryptionKey = `-- name: DeleteEncryptionKey :execresult
delete from encryption_keys where id = $1
`

func (q *Queries) DeleteEncryptionKey(ctx context.Context, id int32) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteEncryptionKey, id)
}

const getActiveKey = `-- name: GetActiveKey :one
select id, public_key, private_key, created_at from encryption_keys
    where is_active = 'true'
`

type GetActiveKeyRow struct {
	ID         int32              `json:"id"`
	PublicKey  string             `json:"public_key"`
	PrivateKey []byte             `json:"private_key"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetActiveKey(ctx context.Context) (GetActiveKeyRow, error) {
	row := q.db.QueryRow(ctx, getActiveKey)
	var i GetActiveKeyRow
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.PrivateKey,
		&i.CreatedAt,
	)
	return i, err
}
