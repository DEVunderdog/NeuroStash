// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type OperationStatus string

const (
	OperationStatusPENDING OperationStatus = "PENDING"
	OperationStatusSUCCESS OperationStatus = "SUCCESS"
	OperationStatusFAILED  OperationStatus = "FAILED"
)

func (e *OperationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OperationStatus(s)
	case string:
		*e = OperationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OperationStatus: %T", src)
	}
	return nil
}

type NullOperationStatus struct {
	OperationStatus OperationStatus `json:"operation_status"`
	Valid           bool            `json:"valid"` // Valid is true if OperationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOperationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OperationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OperationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOperationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OperationStatus), nil
}

type ApiKey struct {
	ID         int32              `json:"id"`
	UserID     int32              `json:"user_id"`
	Credential []byte             `json:"credential"`
	Signature  []byte             `json:"signature"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type DocumentsRegistry struct {
	ID         int32              `json:"id"`
	UserID     int32              `json:"user_id"`
	FileName   string             `json:"file_name"`
	ObjectKey  string             `json:"object_key"`
	LockStatus bool               `json:"lock_status"`
	OpStatus   OperationStatus    `json:"op_status"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type EncryptionKey struct {
	ID         int32              `json:"id"`
	PublicKey  string             `json:"public_key"`
	PrivateKey []byte             `json:"private_key"`
	IsActive   pgtype.Bool        `json:"is_active"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type IngestionJob struct {
	ID         int32              `json:"id"`
	ResourceID pgtype.UUID        `json:"resource_id"`
	OpStatus   OperationStatus    `json:"op_status"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type KnowledgeBaseDocument struct {
	ID              int32              `json:"id"`
	IngestionID     int32              `json:"ingestion_id"`
	KnowledgeBaseID int32              `json:"knowledge_base_id"`
	DocumentID      int32              `json:"document_id"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
}

type KnowledgeBasis struct {
	ID        int32              `json:"id"`
	UserID    int32              `json:"user_id"`
	Name      string             `json:"name"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type UserClient struct {
	ID        int32              `json:"id"`
	Email     string             `json:"email"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}
