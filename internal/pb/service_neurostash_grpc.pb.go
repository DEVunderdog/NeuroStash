// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: service_neurostash.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NeuroStash_UploadFiles_FullMethodName         = "/pb.NeuroStash/UploadFiles"
	NeuroStash_ConfirmUploadStatus_FullMethodName = "/pb.NeuroStash/ConfirmUploadStatus"
	NeuroStash_Sync_FullMethodName                = "/pb.NeuroStash/Sync"
	NeuroStash_CreateUser_FullMethodName          = "/pb.NeuroStash/CreateUser"
	NeuroStash_CreateApiKey_FullMethodName        = "/pb.NeuroStash/CreateApiKey"
	NeuroStash_ListApiKeys_FullMethodName         = "/pb.NeuroStash/ListApiKeys"
	NeuroStash_DeleteApiKey_FullMethodName        = "/pb.NeuroStash/DeleteApiKey"
)

// NeuroStashClient is the client API for NeuroStash service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NeuroStashClient interface {
	UploadFiles(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
	ConfirmUploadStatus(ctx context.Context, in *UploadStatusRequest, opts ...grpc.CallOption) (*Response, error)
	Sync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Response, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*ApiKeyResponse, error)
	CreateApiKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiKeyResponse, error)
	ListApiKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListApiKeyResponse, error)
	DeleteApiKey(ctx context.Context, in *DeleteApiKeyRequest, opts ...grpc.CallOption) (*Response, error)
}

type neuroStashClient struct {
	cc grpc.ClientConnInterface
}

func NewNeuroStashClient(cc grpc.ClientConnInterface) NeuroStashClient {
	return &neuroStashClient{cc}
}

func (c *neuroStashClient) UploadFiles(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, NeuroStash_UploadFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neuroStashClient) ConfirmUploadStatus(ctx context.Context, in *UploadStatusRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, NeuroStash_ConfirmUploadStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neuroStashClient) Sync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, NeuroStash_Sync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neuroStashClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*ApiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiKeyResponse)
	err := c.cc.Invoke(ctx, NeuroStash_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neuroStashClient) CreateApiKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ApiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApiKeyResponse)
	err := c.cc.Invoke(ctx, NeuroStash_CreateApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neuroStashClient) ListApiKeys(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListApiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListApiKeyResponse)
	err := c.cc.Invoke(ctx, NeuroStash_ListApiKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neuroStashClient) DeleteApiKey(ctx context.Context, in *DeleteApiKeyRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, NeuroStash_DeleteApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NeuroStashServer is the server API for NeuroStash service.
// All implementations must embed UnimplementedNeuroStashServer
// for forward compatibility.
type NeuroStashServer interface {
	UploadFiles(context.Context, *UploadRequest) (*UploadResponse, error)
	ConfirmUploadStatus(context.Context, *UploadStatusRequest) (*Response, error)
	Sync(context.Context, *emptypb.Empty) (*Response, error)
	CreateUser(context.Context, *CreateUserRequest) (*ApiKeyResponse, error)
	CreateApiKey(context.Context, *emptypb.Empty) (*ApiKeyResponse, error)
	ListApiKeys(context.Context, *emptypb.Empty) (*ListApiKeyResponse, error)
	DeleteApiKey(context.Context, *DeleteApiKeyRequest) (*Response, error)
	mustEmbedUnimplementedNeuroStashServer()
}

// UnimplementedNeuroStashServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNeuroStashServer struct{}

func (UnimplementedNeuroStashServer) UploadFiles(context.Context, *UploadRequest) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFiles not implemented")
}
func (UnimplementedNeuroStashServer) ConfirmUploadStatus(context.Context, *UploadStatusRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmUploadStatus not implemented")
}
func (UnimplementedNeuroStashServer) Sync(context.Context, *emptypb.Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedNeuroStashServer) CreateUser(context.Context, *CreateUserRequest) (*ApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedNeuroStashServer) CreateApiKey(context.Context, *emptypb.Empty) (*ApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApiKey not implemented")
}
func (UnimplementedNeuroStashServer) ListApiKeys(context.Context, *emptypb.Empty) (*ListApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApiKeys not implemented")
}
func (UnimplementedNeuroStashServer) DeleteApiKey(context.Context, *DeleteApiKeyRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiKey not implemented")
}
func (UnimplementedNeuroStashServer) mustEmbedUnimplementedNeuroStashServer() {}
func (UnimplementedNeuroStashServer) testEmbeddedByValue()                    {}

// UnsafeNeuroStashServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NeuroStashServer will
// result in compilation errors.
type UnsafeNeuroStashServer interface {
	mustEmbedUnimplementedNeuroStashServer()
}

func RegisterNeuroStashServer(s grpc.ServiceRegistrar, srv NeuroStashServer) {
	// If the following call pancis, it indicates UnimplementedNeuroStashServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NeuroStash_ServiceDesc, srv)
}

func _NeuroStash_UploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeuroStashServer).UploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NeuroStash_UploadFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeuroStashServer).UploadFiles(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NeuroStash_ConfirmUploadStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeuroStashServer).ConfirmUploadStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NeuroStash_ConfirmUploadStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeuroStashServer).ConfirmUploadStatus(ctx, req.(*UploadStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NeuroStash_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeuroStashServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NeuroStash_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeuroStashServer).Sync(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NeuroStash_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeuroStashServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NeuroStash_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeuroStashServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NeuroStash_CreateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeuroStashServer).CreateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NeuroStash_CreateApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeuroStashServer).CreateApiKey(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NeuroStash_ListApiKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeuroStashServer).ListApiKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NeuroStash_ListApiKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeuroStashServer).ListApiKeys(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NeuroStash_DeleteApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeuroStashServer).DeleteApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NeuroStash_DeleteApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeuroStashServer).DeleteApiKey(ctx, req.(*DeleteApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NeuroStash_ServiceDesc is the grpc.ServiceDesc for NeuroStash service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NeuroStash_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NeuroStash",
	HandlerType: (*NeuroStashServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFiles",
			Handler:    _NeuroStash_UploadFiles_Handler,
		},
		{
			MethodName: "ConfirmUploadStatus",
			Handler:    _NeuroStash_ConfirmUploadStatus_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _NeuroStash_Sync_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _NeuroStash_CreateUser_Handler,
		},
		{
			MethodName: "CreateApiKey",
			Handler:    _NeuroStash_CreateApiKey_Handler,
		},
		{
			MethodName: "ListApiKeys",
			Handler:    _NeuroStash_ListApiKeys_Handler,
		},
		{
			MethodName: "DeleteApiKey",
			Handler:    _NeuroStash_DeleteApiKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_neurostash.proto",
}
