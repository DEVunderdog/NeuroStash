"""init

Revision ID: 2890d657f30f
Revises: 
Create Date: 2025-05-14 23:27:12.947419

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '2890d657f30f'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('encryption_keys',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('symmetric_key', sa.LargeBinary(), nullable=False),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('expired_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_encryption_keys_active', 'encryption_keys', ['id'], unique=False, postgresql_where=sa.text('is_active'))
    op.create_table('user_clients',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('role', sa.Enum('USER', 'ADMIN', name='client_roles'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('api_keys',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('key_id', sa.Integer(), nullable=False),
    sa.Column('key_credential', sa.LargeBinary(), nullable=False),
    sa.Column('key_signature', sa.LargeBinary(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['key_id'], ['encryption_keys.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user_clients.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('key_credential')
    )
    op.create_index(op.f('ix_api_keys_key_id'), 'api_keys', ['key_id'], unique=False)
    op.create_index(op.f('ix_api_keys_user_id'), 'api_keys', ['user_id'], unique=False)
    op.create_table('documents_registry',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('file_name', sa.String(length=100), nullable=False),
    sa.Column('object_key', sa.String(length=150), nullable=False),
    sa.Column('lock_status', sa.Boolean(), nullable=False),
    sa.Column('op_status', sa.Enum('PENDING', 'SUCCESS', 'FAILED', name='operation_status'), server_default='PENDING', nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user_clients.id'], onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'file_name', name='idx_unique_filename')
    )
    op.create_index('idx_file_registry_user_id', 'documents_registry', ['user_id', 'lock_status', 'op_status'], unique=False)
    op.create_table('knowledge_bases',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user_clients.id'], onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'name', name='idx_unique_kb_name')
    )
    op.create_table('ingestion_jobs',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('kb_id', sa.Integer(), nullable=False),
    sa.Column('resource_id', sa.UUID(), nullable=False),
    sa.Column('op_status', sa.Enum('PENDING', 'SUCCESS', 'FAILED', name='operation_status'), server_default='PENDING', nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['kb_id'], ['knowledge_bases.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_job_kb', 'ingestion_jobs', ['kb_id'], unique=False)
    op.create_table('knowledge_base_documents',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('knowledge_base_id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['document_id'], ['documents_registry.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['knowledge_base_id'], ['knowledge_bases.id'], onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('knowledge_base_id', 'document_id', name='idx_unique_kb_doc_combination')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('knowledge_base_documents')
    op.drop_index('idx_job_kb', table_name='ingestion_jobs')
    op.drop_table('ingestion_jobs')
    op.drop_table('knowledge_bases')
    op.drop_index('idx_file_registry_user_id', table_name='documents_registry')
    op.drop_table('documents_registry')
    op.drop_index(op.f('ix_api_keys_user_id'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_key_id'), table_name='api_keys')
    op.drop_table('api_keys')
    op.drop_table('user_clients')
    op.drop_index('idx_encryption_keys_active', table_name='encryption_keys', postgresql_where=sa.text('is_active'))
    op.drop_table('encryption_keys')
    # ### end Alembic commands ###
